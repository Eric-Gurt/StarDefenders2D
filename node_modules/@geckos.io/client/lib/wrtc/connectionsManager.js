"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bridge_1 = require("@geckos.io/common/lib/bridge");
var parseMessage_1 = __importDefault(require("@geckos.io/common/lib/parseMessage"));
var sendMessage_1 = __importDefault(require("@geckos.io/common/lib/sendMessage"));
var ConnectionsManagerClient = /** @class */ (function () {
    function ConnectionsManagerClient(url, authorization, label, rtcConfiguration) {
        var _this = this;
        this.url = url;
        this.authorization = authorization;
        this.label = label;
        this.rtcConfiguration = rtcConfiguration;
        this.bridge = new bridge_1.Bridge();
        this.onDataChannel = function (ev) {
            var channel = ev.channel;
            if (channel.label !== _this.label)
                return;
            _this.dataChannel = channel;
            // set default binaryType to arraybuffer
            // https://github.com/node-webrtc/node-webrtc/issues/441
            _this.dataChannel.binaryType = 'arraybuffer';
            _this.dataChannel.onmessage = function (ev) {
                var _a = parseMessage_1.default(ev), key = _a.key, data = _a.data;
                _this.bridge.emit(key, data);
            };
        };
    }
    ConnectionsManagerClient.prototype.emit = function (eventName, data) {
        if (data === void 0) { data = null; }
        sendMessage_1.default(this.dataChannel, this.maxMessageSize, eventName, data);
    };
    // fetch additional candidates
    ConnectionsManagerClient.prototype.fetchAdditionalCandidates = function (host, id) {
        return __awaiter(this, void 0, void 0, function () {
            var res, candidates;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(host + "/connections/" + id + "/additional-candidates", {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })];
                    case 1:
                        res = _a.sent();
                        if (!res.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        candidates = _a.sent();
                        candidates.forEach(function (c) {
                            _this.localPeerConnection.addIceCandidate(c);
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ConnectionsManagerClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var host, headers, userData, res, json, error_1, _a, id, localDescription, configuration, RTCPc, showBackOffIntervals, originalAnswer, updatedAnswer, error_2, waitForDataChannel, error_3;
            var _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        host = this.url + "/.wrtc/v1";
                        headers = { 'Content-Type': 'application/json' };
                        if (this.authorization)
                            headers = __assign(__assign({}, headers), (_b = {}, _b['Authorization'] = this.authorization, _b));
                        userData = {};
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetch(host + "/connections", {
                                method: 'POST',
                                headers: headers
                            })];
                    case 2:
                        res = _c.sent();
                        return [4 /*yield*/, res.json()];
                    case 3:
                        json = _c.sent();
                        userData = json.userData;
                        this.remotePeerConnection = json;
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _c.sent();
                        console.error(error_1.message);
                        return [2 /*return*/, { error: error_1 }];
                    case 5:
                        _a = this.remotePeerConnection, id = _a.id, localDescription = _a.localDescription;
                        configuration = __assign({ 
                            // @ts-ignore
                            sdpSemantics: 'unified-plan' }, this.rtcConfiguration);
                        RTCPc = RTCPeerConnection ||
                            webkitRTCPeerConnection ||
                            // @ts-ignore
                            mozRTCPeerConnection;
                        // create rtc peer connection
                        this.localPeerConnection = new RTCPc(configuration);
                        showBackOffIntervals = function (attempts, initial, factor, jitter) {
                            if (attempts === void 0) { attempts = 10; }
                            if (initial === void 0) { initial = 50; }
                            if (factor === void 0) { factor = 1.8; }
                            if (jitter === void 0) { jitter = 20; }
                            return Array(attempts)
                                .fill(0)
                                .map(function (_, index) { return parseInt((initial * Math.pow(factor, index)).toString()) + parseInt((Math.random() * jitter).toString()); });
                        };
                        showBackOffIntervals().forEach(function (ms) {
                            setTimeout(function () {
                                _this.fetchAdditionalCandidates(host, id);
                            }, ms);
                        });
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 16, , 17]);
                        return [4 /*yield*/, this.localPeerConnection.setRemoteDescription(localDescription)];
                    case 7:
                        _c.sent();
                        this.localPeerConnection.addEventListener('datachannel', this.onDataChannel, { once: true });
                        return [4 /*yield*/, this.localPeerConnection.createAnswer()];
                    case 8:
                        originalAnswer = _c.sent();
                        updatedAnswer = new RTCSessionDescription({
                            type: 'answer',
                            sdp: originalAnswer.sdp
                        });
                        return [4 /*yield*/, this.localPeerConnection.setLocalDescription(updatedAnswer)];
                    case 9:
                        _c.sent();
                        _c.label = 10;
                    case 10:
                        _c.trys.push([10, 12, , 13]);
                        return [4 /*yield*/, fetch(host + "/connections/" + id + "/remote-description", {
                                method: 'POST',
                                body: JSON.stringify(this.localPeerConnection.localDescription),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })];
                    case 11:
                        _c.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        error_2 = _c.sent();
                        console.error(error_2.message);
                        return [2 /*return*/, { error: error_2 }];
                    case 13:
                        waitForDataChannel = function () {
                            return new Promise(function (resolve) {
                                _this.localPeerConnection.addEventListener('datachannel', function () {
                                    resolve();
                                }, { once: true });
                            });
                        };
                        if (!!this.dataChannel) return [3 /*break*/, 15];
                        return [4 /*yield*/, waitForDataChannel()];
                    case 14:
                        _c.sent();
                        _c.label = 15;
                    case 15: return [2 /*return*/, {
                            userData: userData,
                            localPeerConnection: this.localPeerConnection,
                            dataChannel: this.dataChannel,
                            id: id
                        }];
                    case 16:
                        error_3 = _c.sent();
                        console.error(error_3.message);
                        this.localPeerConnection.close();
                        return [2 /*return*/, { error: error_3 }];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    return ConnectionsManagerClient;
}());
exports.default = ConnectionsManagerClient;
//# sourceMappingURL=connectionsManager.js.map