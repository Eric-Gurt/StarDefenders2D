"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientChannel = void 0;
var reliableMessage_1 = require("@geckos.io/common/lib/reliableMessage");
var constants_1 = require("@geckos.io/common/lib/constants");
var peerConnection_1 = __importDefault(require("../wrtc/peerConnection"));
var connectionsManager_1 = __importDefault(require("../wrtc/connectionsManager"));
var ClientChannel = /** @class */ (function () {
    function ClientChannel(url, authorization, port, label, rtcConfiguration) {
        var _this = this;
        this.userData = {};
        // stores all reliable messages for about 15 seconds
        this.receivedReliableMessages = [];
        this.url = port ? url + ":" + port : url;
        this.connectionsManager = new connectionsManager_1.default(this.url, authorization, label, rtcConfiguration);
        this.bridge = this.connectionsManager.bridge;
        // remove all event listeners on disconnect
        this.bridge.on(constants_1.EVENTS.DISCONNECTED, function () { return _this.bridge.removeAllListeners(); });
    }
    ClientChannel.prototype.onconnectionstatechange = function () {
        var _this = this;
        var lpc = this.peerConnection.localPeerConnection;
        lpc.onconnectionstatechange = function () {
            if (lpc.connectionState === 'disconnected' || lpc.connectionState === 'closed')
                _this.bridge.emit(constants_1.EVENTS.DISCONNECTED);
        };
    };
    Object.defineProperty(ClientChannel.prototype, "id", {
        /** Get the channel's id. */
        get: function () {
            return this.peerConnection.id;
        },
        enumerable: false,
        configurable: true
    });
    /** Close the WebRTC connection */
    ClientChannel.prototype.close = function () {
        this.peerConnection.localPeerConnection.close();
        // fire the DISCONNECTED event manually
        this.bridge.emit(constants_1.EVENTS.DISCONNECTED);
        try {
            var host = this.url + "/.wrtc/v1";
            fetch(host + "/connections/" + this.id + "/close", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
        catch (error) {
            console.error(error.message);
        }
    };
    /** Emit a message to the server. */
    ClientChannel.prototype.emit = function (eventName, data, options) {
        var _this = this;
        if (data === void 0) { data = null; }
        if (options && options.reliable) {
            reliableMessage_1.makeReliable(options, function (id) {
                return _this.connectionsManager.emit(eventName, {
                    MESSAGE: data,
                    RELIABLE: 1,
                    ID: id
                });
            });
        }
        else {
            this.connectionsManager.emit(eventName, data);
        }
    };
    Object.defineProperty(ClientChannel.prototype, "raw", {
        /** Emit a raw message to the server */
        get: function () {
            var _this = this;
            return {
                /**
                 * Emit a raw message.
                 * @param rawMessage The raw message. Can be of type 'USVString | ArrayBuffer | ArrayBufferView'
                 */
                emit: function (rawMessage) { return _this.emit(constants_1.EVENTS.RAW_MESSAGE, rawMessage); }
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Listen for a raw message from the server.
     * @param callback The event callback.
     */
    ClientChannel.prototype.onRaw = function (callback) {
        this.bridge.on(constants_1.EVENTS.RAW_MESSAGE, function (rawMessage) {
            var cb = function (rawMessage) { return callback(rawMessage); };
            cb(rawMessage);
        });
    };
    /**
     * Listen for the connect event.
     * @param callback The event callback.
     */
    ClientChannel.prototype.onConnect = function (callback) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.peerConnection = new peerConnection_1.default();
                        return [4 /*yield*/, this.peerConnection.connect(this.connectionsManager)];
                    case 1:
                        response = _b.sent();
                        if (response.error)
                            callback(response.error);
                        else {
                            // set the userData
                            if (response.userData)
                                this.userData = response.userData;
                            // keep track of the maxMessageSize
                            this.maxMessageSize = this.connectionsManager.maxMessageSize = (_a = this.peerConnection.localPeerConnection.sctp) === null || _a === void 0 ? void 0 : _a.maxMessageSize;
                            // init onConnectionStateChange event
                            this.onconnectionstatechange();
                            // we are now ready
                            callback();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Listen for the disconnect event.
     * @param callback The event callback.
     */
    ClientChannel.prototype.onDisconnect = function (callback) {
        this.bridge.on(constants_1.EVENTS.DISCONNECTED, callback);
    };
    /**
     * Listen for a message from the server.
     * @param eventName The event name.
     * @param callback The event callback.
     */
    ClientChannel.prototype.on = function (eventName, callback) {
        var _this = this;
        this.bridge.on(eventName, function (data) {
            // check if message is reliable
            // and reject it if it has already been submitted
            var isReliableMessage = data && data.RELIABLE === 1 && data.ID !== 'undefined';
            var expireTime = 15000; // 15 seconds
            var deleteExpiredReliableMessages = function () {
                var currentTime = new Date().getTime();
                _this.receivedReliableMessages.forEach(function (msg, index, object) {
                    if (msg.expire <= currentTime) {
                        object.splice(index, 1);
                    }
                });
            };
            if (isReliableMessage) {
                deleteExpiredReliableMessages();
                if (_this.receivedReliableMessages.filter(function (obj) { return obj.id === data.ID; }).length === 0) {
                    _this.receivedReliableMessages.push({
                        id: data.ID,
                        timestamp: new Date(),
                        expire: new Date().getTime() + expireTime
                    });
                    callback(data.MESSAGE);
                }
                else {
                    // reject message
                }
            }
            else {
                callback(data);
            }
        });
    };
    return ClientChannel;
}());
exports.ClientChannel = ClientChannel;
/**
 * The geckos.io client library.
 * @param options.url The url of the server. Default: \`${location.protocol}//${location.hostname}\`.
 * @param options.port The port of the server. Default: 9208.
 * @param options.label The label of the DataChannel. Default: 'geckos.io'.
 * @param options.iceServers An array of RTCIceServers. See https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer.
 * @param options.iceTransportPolicy RTCIceTransportPolicy enum defines string constants which can be used to limit the transport policies of the ICE candidates to be considered during the connection process.
 */
var geckosClient = function (options) {
    if (options === void 0) { options = {}; }
    var _a = options.iceServers, iceServers = _a === void 0 ? [] : _a, _b = options.iceTransportPolicy, iceTransportPolicy = _b === void 0 ? 'all' : _b, _c = options.url, url = _c === void 0 ? location.protocol + "//" + location.hostname : _c, _d = options.authorization, authorization = _d === void 0 ? undefined : _d, _e = options.port, port = _e === void 0 ? 9208 : _e, _f = options.label, label = _f === void 0 ? 'geckos.io' : _f;
    return new ClientChannel(url, authorization, port, label, { iceServers: iceServers, iceTransportPolicy: iceTransportPolicy });
};
exports.default = geckosClient;
//# sourceMappingURL=channel.js.map