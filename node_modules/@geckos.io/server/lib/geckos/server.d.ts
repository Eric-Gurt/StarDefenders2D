/// <reference types="node" />
import http from 'http';
import ServerChannel from './channel';
import * as Types from '@geckos.io/common/lib/types';
import ConnectionsManagerServer from '../wrtc/connectionsManager';
export declare class GeckosServer {
    private _port;
    private _cors;
    connectionsManager: ConnectionsManagerServer;
    server: http.Server;
    constructor(options: Types.ServerOptions);
    private get connections();
    /**
     * Make the server listen on a specific port.
     * @param port Default port is 9208.
     */
    listen(port?: number): void;
    /**
     * Add a existing http server.
     * @param server Your http.Server.
     */
    addServer(server: http.Server): void;
    get port(): number;
    /**
     * Emit a message to all channels.
     * @param eventName The event name.
     * @param data The data you want to send.
     * @param options EmitOptions
     */
    emit(eventName: Types.EventName, data: Types.Data, options?: Types.EmitOptions): void;
    /**
     * Emit a message to a specific room.
     * @param roomId The roomId.
     */
    room(roomId?: Types.RoomId): {
        emit: (eventName: Types.EventName, data: Types.Data) => void;
    };
    /** Emit a raw message */
    get raw(): {
        emit: (rawMessage: Types.RawMessage) => void;
        room: (roomId?: Types.RoomId) => {
            emit: (rawMessage: Types.RawMessage) => void;
        };
    };
    /** Listen for a new connection. */
    onConnection(callback: (channel: ServerChannel) => void): void;
}
/**
 * The geckos.io server library.
 * @param options Pass the geckos.io server options.
 * @param options.iceServers An array of RTCIceServers. See https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer.
 * @param options.iceTransportPolicy RTCIceTransportPolicy enum defines string constants which can be used to limit the transport policies of the ICE candidates to be considered during the connection process.
 * @param options.label A human-readable name for the channel. This string may not be longer than 65,535 bytes. Default: 'geckos.io'.
 * @param options.ordered Indicates whether or not messages sent on the RTCDataChannel are required to arrive at their destination in the same order in which they were sent (true), or if they're allowed to arrive out-of-order (false). Default: false.
 * @param options.maxPacketLifeTime The maximum number of milliseconds that attempts to transfer a message may take in unreliable mode. While this value is a 16-bit unsigned number, each user agent may clamp it to whatever maximum it deems appropriate. Default: null.
 * @param options.maxRetransmits The maximum number of times the user agent should attempt to retransmit a message which fails the first time in unreliable mode. While this value is a16-bit unsigned number, each user agent may clamp it to whatever maximum it deems appropriate. Default: 0.
 * @param options.cors Set the CORS options.
 * @param options.cors.origin String OR (req: http.IncomingMessage) => string. Default '*'
 * @param options.autoManageBuffering By default, geckos.io manages RTCDataChannel buffering for you. Default 'true'
 * @param options.authorization The async authorization callback
 */
declare const geckosServer: (options?: Types.ServerOptions) => GeckosServer;
export default geckosServer;
export { ServerChannel };
//# sourceMappingURL=server.d.ts.map