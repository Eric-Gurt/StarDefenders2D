"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connection_1 = __importDefault(require("./connection"));
var channel_1 = __importDefault(require("../geckos/channel"));
var DefaultRTCPeerConnection = require('wrtc').RTCPeerConnection;
// strangely something it takes a long time
// so I set it to 10 seconds
var TIME_TO_HOST_CANDIDATES = 10000;
var WebRTCConnection = /** @class */ (function (_super) {
    __extends(WebRTCConnection, _super);
    function WebRTCConnection(id, serverOptions, connections, userData) {
        var _this = _super.call(this, id) || this;
        _this.connections = connections;
        _this.userData = userData;
        _this.additionalCandidates = [];
        _this.toJSON = function () {
            return __assign(__assign({}, _super.prototype.toJSON.call(_this)), { iceConnectionState: _this.iceConnectionState, localDescription: _this.localDescription, remoteDescription: _this.remoteDescription, signalingState: _this.signalingState });
        };
        var _a = serverOptions.iceServers, iceServers = _a === void 0 ? [] : _a, _b = serverOptions.iceTransportPolicy, iceTransportPolicy = _b === void 0 ? 'all' : _b, portRange = serverOptions.portRange, dataChannelOptions = __rest(serverOptions, ["iceServers", "iceTransportPolicy", "portRange"]);
        _this.options = {
            timeToHostCandidates: TIME_TO_HOST_CANDIDATES
        };
        var configuration = {
            // @ts-ignore
            sdpSemantics: 'unified-plan',
            iceServers: iceServers,
            iceTransportPolicy: iceTransportPolicy
        };
        // @ts-ignore   // portRange is a nonstandard API
        if ((portRange === null || portRange === void 0 ? void 0 : portRange.min) && (portRange === null || portRange === void 0 ? void 0 : portRange.max))
            configuration = __assign(__assign({}, configuration), { portRange: portRange });
        // @ts-ignore
        _this.peerConnection = new DefaultRTCPeerConnection(configuration);
        _this.peerConnection.onconnectionstatechange = function () {
            if (_this.peerConnection.connectionState === 'disconnected')
                _this.close();
        };
        _this.channel = new channel_1.default(_this, dataChannelOptions, userData);
        return _this;
    }
    WebRTCConnection.prototype.doOffer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var offer, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.peerConnection.createOffer()];
                    case 1:
                        offer = _a.sent();
                        return [4 /*yield*/, this.peerConnection.setLocalDescription(offer)
                            // we do not wait, since we request the missing candidates later
                            /*await*/ ];
                    case 2:
                        _a.sent();
                        // we do not wait, since we request the missing candidates later
                        /*await*/ this.waitUntilIceGatheringStateComplete(this.peerConnection, this.options);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        console.error(error_1.messages);
                        this.close();
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(WebRTCConnection.prototype, "iceConnectionState", {
        get: function () {
            return this.peerConnection.iceConnectionState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebRTCConnection.prototype, "localDescription", {
        get: function () {
            return this.descriptionToJSON(this.peerConnection.localDescription); //, true)
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebRTCConnection.prototype, "remoteDescription", {
        get: function () {
            return this.descriptionToJSON(this.peerConnection.remoteDescription);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebRTCConnection.prototype, "signalingState", {
        get: function () {
            return this.peerConnection.signalingState;
        },
        enumerable: false,
        configurable: true
    });
    WebRTCConnection.prototype.applyAnswer = function (answer) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.peerConnection.setRemoteDescription(answer)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WebRTCConnection.prototype.descriptionToJSON = function (description, shouldDisableTrickleIce) {
        if (shouldDisableTrickleIce === void 0) { shouldDisableTrickleIce = false; }
        return !description
            ? {}
            : {
                type: description.type,
                sdp: shouldDisableTrickleIce ? this.disableTrickleIce(description.sdp) : description.sdp
            };
    };
    WebRTCConnection.prototype.disableTrickleIce = function (sdp) {
        return sdp.replace(/\r\na=ice-options:trickle/g, '');
    };
    WebRTCConnection.prototype.close = function () {
        this.peerConnection.close();
        _super.prototype.close.call(this);
    };
    WebRTCConnection.prototype.waitUntilIceGatheringStateComplete = function (peerConnection, options) {
        return __awaiter(this, void 0, void 0, function () {
            var totalIceCandidates, timeToHostCandidates;
            var _this = this;
            return __generator(this, function (_a) {
                if (peerConnection.iceGatheringState === 'complete') {
                    return [2 /*return*/];
                }
                totalIceCandidates = 0;
                timeToHostCandidates = options.timeToHostCandidates;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var timeout = setTimeout(function () {
                            peerConnection.removeEventListener('icecandidate', onIceCandidate);
                            // if time is up but we found some iceCandidates
                            if (totalIceCandidates > 0) {
                                // console.log('Timed out waiting for all host candidates, will continue with what we have so far.')
                                resolve();
                            }
                            else {
                                reject(new Error('Timed out waiting for host candidates State: ' + peerConnection.iceGatheringState));
                            }
                        }, timeToHostCandidates);
                        // peerConnection.addEventListener('icegatheringstatechange', _ev => {
                        //   console.log('seconds', new Date().getSeconds(), peerConnection.iceGatheringState)
                        // })
                        var onIceCandidate = function (ev) {
                            var candidate = ev.candidate;
                            totalIceCandidates++;
                            if (candidate)
                                _this.additionalCandidates.push(candidate);
                            if (!candidate) {
                                clearTimeout(timeout);
                                peerConnection.removeEventListener('icecandidate', onIceCandidate);
                                resolve();
                            }
                        };
                        peerConnection.addEventListener('icecandidate', onIceCandidate);
                    })];
            });
        });
    };
    return WebRTCConnection;
}(connection_1.default));
exports.default = WebRTCConnection;
//# sourceMappingURL=webrtcConnection.js.map