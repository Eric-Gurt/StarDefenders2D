/// <reference types="node" />
import WebRTCConnection from './webrtcConnection';
import { ChannelId, ServerOptions } from '@geckos.io/common/lib/types';
import type { IncomingMessage, OutgoingMessage } from 'http';
export default class ConnectionsManagerServer {
    options: ServerOptions;
    connections: Map<ChannelId, WebRTCConnection>;
    constructor(options: ServerOptions);
    private createId;
    getConnection(id: ChannelId): WebRTCConnection | null;
    getConnections(): Map<ChannelId, WebRTCConnection>;
    private getUserData;
    createConnection(authorization: string | undefined, request: IncomingMessage, response: OutgoingMessage): Promise<{
        userData: any;
        status: any;
        connection?: undefined;
    } | {
        connection: {
            id: ChannelId;
            iceConnectionState: RTCIceConnectionState;
            peerConnection: RTCPeerConnection;
            remoteDescription: {
                type?: undefined;
                sdp?: undefined;
            } | {
                type: RTCSdpType;
                sdp: string;
            };
            localDescription: {
                type?: undefined;
                sdp?: undefined;
            } | {
                type: RTCSdpType;
                sdp: string;
            };
            signalingState: RTCSignalingState;
        };
        userData: any;
        status: number;
    }>;
    deleteConnection(connection: WebRTCConnection): void;
}
//# sourceMappingURL=connectionsManager.d.ts.map