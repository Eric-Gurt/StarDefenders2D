"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var webrtcConnection_1 = __importDefault(require("./webrtcConnection"));
var constants_1 = require("@geckos.io/common/lib/constants");
var makeRandomId_1 = __importDefault(require("@geckos.io/common/lib/makeRandomId"));
var ConnectionsManagerServer = /** @class */ (function () {
    function ConnectionsManagerServer(options) {
        this.options = options;
        this.connections = new Map();
    }
    ConnectionsManagerServer.prototype.createId = function () {
        do {
            var id = makeRandomId_1.default(24);
            if (!this.connections.has(id)) {
                return id;
            }
        } while (true);
    };
    ConnectionsManagerServer.prototype.getConnection = function (id) {
        return this.connections.get(id) || null;
    };
    ConnectionsManagerServer.prototype.getConnections = function () {
        return this.connections;
    };
    ConnectionsManagerServer.prototype.getUserData = function (authorization, request, response) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var userData, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        userData = {};
                        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.authorization)) return [3 /*break*/, 2];
                        if (typeof this.options.authorization !== 'function') {
                            console.log('[warning] Authorization is not a function!?');
                            return [2 /*return*/, { _statusCode: 500 }];
                        }
                        return [4 /*yield*/, this.options.authorization(authorization, request, response)];
                    case 1:
                        res = _b.sent();
                        if (typeof res === 'boolean' && res)
                            userData = {};
                        else if (typeof res === 'boolean' && !res)
                            return [2 /*return*/, { _statusCode: 401 }];
                        else if (typeof res === 'number' && res >= 100 && res < 600)
                            return [2 /*return*/, { _statusCode: res }];
                        else
                            userData = res;
                        _b.label = 2;
                    case 2: return [2 /*return*/, userData];
                }
            });
        });
    };
    ConnectionsManagerServer.prototype.createConnection = function (authorization, request, response) {
        return __awaiter(this, void 0, void 0, function () {
            var userData, connection, pc, id, iceConnectionState, peerConnection, remoteDescription, localDescription, signalingState;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserData(authorization, request, response)];
                    case 1:
                        userData = _a.sent();
                        if (userData._statusCode)
                            return [2 /*return*/, { userData: userData, status: userData._statusCode }
                                // create the webrtc connection
                            ];
                        connection = new webrtcConnection_1.default(this.createId(), this.options, this.connections, userData);
                        pc = connection.peerConnection;
                        pc.onconnectionstatechange = function () {
                            var _a;
                            // keep track of the maxMessageSize
                            if (pc.connectionState === 'connected')
                                connection.channel.maxMessageSize = (_a = pc.sctp) === null || _a === void 0 ? void 0 : _a.maxMessageSize;
                            if (pc.connectionState === 'disconnected' || pc.connectionState === 'failed' || pc.connectionState === 'closed') {
                                connection.channel.eventEmitter.emit(constants_1.EVENTS.DISCONNECT, pc.connectionState);
                                _this.deleteConnection(connection);
                            }
                        };
                        this.connections.set(connection.id, connection);
                        // create the offer
                        return [4 /*yield*/, connection.doOffer()];
                    case 2:
                        // create the offer
                        _a.sent();
                        id = connection.id, iceConnectionState = connection.iceConnectionState, peerConnection = connection.peerConnection, remoteDescription = connection.remoteDescription, localDescription = connection.localDescription, signalingState = connection.signalingState;
                        return [2 /*return*/, {
                                connection: {
                                    id: id,
                                    iceConnectionState: iceConnectionState,
                                    peerConnection: peerConnection,
                                    remoteDescription: remoteDescription,
                                    localDescription: localDescription,
                                    signalingState: signalingState
                                },
                                userData: userData,
                                status: 200
                            }];
                }
            });
        });
    };
    ConnectionsManagerServer.prototype.deleteConnection = function (connection) {
        connection.close();
        connection.channel.eventEmitter.removeAllListeners();
        connection.removeAllListeners();
        this.connections.delete(connection.id);
    };
    return ConnectionsManagerServer;
}());
exports.default = ConnectionsManagerServer;
//# sourceMappingURL=connectionsManager.js.map