"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = __importDefault(require("url"));
var setCors_1 = __importDefault(require("./setCors"));
var parseBody_1 = __importDefault(require("./parseBody"));
var end = function (res, statusCode) {
    res.writeHead(statusCode);
    res.end();
};
var HttpServer = function (server, connectionsManager, cors) {
    var prefix = '.wrtc';
    var version = 'v1';
    var root = "/" + prefix + "/" + version;
    var rootRegEx = new RegExp("/" + prefix + "/" + version);
    var evs = server.listeners('request').slice(0);
    server.removeAllListeners('request');
    server.on('request', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
        var pathname, headers, method, i, path1, path2, path3, closePath, body, error_1, _a, status_1, connection, userData, id, iceConnectionState, peerConnection, remoteDescription, localDescription, signalingState, error_2, ids, id, connection, connectionJSON, error_3, ids, id, connection, additionalCandidates, ids, id, connection;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    pathname = req.url ? url_1.default.parse(req.url, true).pathname : undefined;
                    headers = req.headers;
                    method = req.method;
                    // if the request is not part of the rootRegEx,
                    // trigger the other server's (Express) events.
                    if (!pathname || !rootRegEx.test(pathname)) {
                        for (i = 0; i < evs.length; i++) {
                            evs[i].call(server, req, res);
                        }
                    }
                    if (!(pathname && rootRegEx.test(pathname))) return [3 /*break*/, 17];
                    path1 = pathname === root + "/connections";
                    path2 = new RegExp(prefix + "/" + version + "/connections/[0-9a-zA-Z]+/remote-description").test(pathname);
                    path3 = new RegExp(prefix + "/" + version + "/connections/[0-9a-zA-Z]+/additional-candidates").test(pathname);
                    closePath = new RegExp(prefix + "/" + version + "/connections/[0-9a-zA-Z]+/close").test(pathname);
                    setCors_1.default(req, res, cors);
                    if (req.method === 'OPTIONS') {
                        end(res, 200);
                        return [2 /*return*/];
                    }
                    body = '';
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, parseBody_1.default(req)];
                case 2:
                    body = (_b.sent());
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _b.sent();
                    end(res, 400);
                    return [2 /*return*/];
                case 4:
                    res.on('error', function (_error) {
                        end(res, 500);
                        return;
                    });
                    res.setHeader('Content-Type', 'application/json');
                    if (!(pathname && method)) return [3 /*break*/, 17];
                    if (!(method === 'POST' && path1)) return [3 /*break*/, 9];
                    _b.label = 5;
                case 5:
                    _b.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, connectionsManager.createConnection(headers === null || headers === void 0 ? void 0 : headers.authorization, req, res)
                        // on http status code
                    ];
                case 6:
                    _a = _b.sent(), status_1 = _a.status, connection = _a.connection, userData = _a.userData;
                    // on http status code
                    if (status_1 !== 200) {
                        if (status_1 >= 100 && status_1 < 600)
                            end(res, status_1);
                        else
                            end(res, 500);
                        return [2 /*return*/];
                    }
                    if (!connection || !connection.id) {
                        end(res, 500);
                        return [2 /*return*/];
                    }
                    id = connection.id, iceConnectionState = connection.iceConnectionState, peerConnection = connection.peerConnection, remoteDescription = connection.remoteDescription, localDescription = connection.localDescription, signalingState = connection.signalingState;
                    res.write(JSON.stringify({
                        userData: userData,
                        id: id,
                        iceConnectionState: iceConnectionState,
                        peerConnection: peerConnection,
                        remoteDescription: remoteDescription,
                        localDescription: localDescription,
                        signalingState: signalingState
                    }));
                    res.end();
                    return [2 /*return*/];
                case 7:
                    error_2 = _b.sent();
                    end(res, 500);
                    return [2 /*return*/];
                case 8: return [3 /*break*/, 17];
                case 9:
                    if (!(method === 'POST' && path2)) return [3 /*break*/, 16];
                    ids = pathname.match(/[0-9a-zA-Z]{24}/g);
                    if (!(ids && ids.length === 1)) return [3 /*break*/, 14];
                    id = ids[0];
                    connection = connectionsManager.getConnection(id);
                    if (!connection) {
                        end(res, 404);
                        return [2 /*return*/];
                    }
                    _b.label = 10;
                case 10:
                    _b.trys.push([10, 12, , 13]);
                    return [4 /*yield*/, connection.applyAnswer(JSON.parse(body))];
                case 11:
                    _b.sent();
                    connectionJSON = connection.toJSON();
                    res.write(JSON.stringify(connectionJSON.remoteDescription));
                    res.end();
                    return [2 /*return*/];
                case 12:
                    error_3 = _b.sent();
                    end(res, 400);
                    return [2 /*return*/];
                case 13: return [3 /*break*/, 15];
                case 14:
                    end(res, 400);
                    return [2 /*return*/];
                case 15: return [3 /*break*/, 17];
                case 16:
                    if (method === 'GET' && path3) {
                        ids = pathname.match(/[0-9a-zA-Z]{24}/g);
                        if (ids && ids.length === 1) {
                            id = ids[0];
                            connection = connectionsManager.getConnection(id);
                            if (!connection) {
                                end(res, 404);
                                return [2 /*return*/];
                            }
                            try {
                                additionalCandidates = __spreadArrays(connection.additionalCandidates);
                                connection.additionalCandidates = [];
                                res.write(JSON.stringify(additionalCandidates));
                                res.end();
                                return [2 /*return*/];
                            }
                            catch (error) {
                                end(res, 400);
                                return [2 /*return*/];
                            }
                        }
                        else {
                            end(res, 400);
                            return [2 /*return*/];
                        }
                    }
                    else if (method === 'POST' && closePath) {
                        ids = pathname.match(/[0-9a-zA-Z]{24}/g);
                        if (ids && ids.length === 1) {
                            id = ids[0];
                            connection = connectionsManager.getConnection(id);
                            connection === null || connection === void 0 ? void 0 : connection.close();
                        }
                        else {
                            end(res, 400);
                            return [2 /*return*/];
                        }
                    }
                    else {
                        end(res, 404);
                        return [2 /*return*/];
                    }
                    _b.label = 17;
                case 17: return [2 /*return*/];
            }
        });
    }); });
};
exports.default = HttpServer;
//# sourceMappingURL=httpServer.js.map